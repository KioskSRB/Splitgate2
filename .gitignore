// Store recent input reports for each player (could be in memory or a database)
const playerInputData = new Map();

// Thresholds - these would be tuned with real gameplay data
const THRESHOLDS = {
  variance: 0.001,            // Very low variance = suspiciously uniform input
  smoothness: 0.95,           // Extremely smooth inputs are suspicious
  impossibleFlicks: 1         // Number of impossible flicks tolerated before flagging
};

function receiveInputReport(report) {
  const { playerId, inputVariance, inputSmoothness, impossibleFlickTimestamps } = report;

  if (!playerInputData.has(playerId)) {
    playerInputData.set(playerId, []);
  }

  // Add the new report to this player's history
  const reports = playerInputData.get(playerId);
  reports.push(report);

  // Keep only the last 5 reports (adjust window size as needed)
  if (reports.length > 5) {
    reports.shift();
  }

  // Calculate averages and aggregates over the recent reports
  const avgVariance = reports.reduce((sum, r) => sum + r.inputVariance, 0) / reports.length;
  const avgSmoothness = reports.reduce((sum, r) => sum + r.inputSmoothness, 0) / reports.length;

  // Count all flicks across recent reports
  const totalImpossibleFlicks = reports.reduce(
    (count, r) => count + (r.impossibleFlickTimestamps ? r.impossibleFlickTimestamps.length : 0),
    0
  );

  // Check if this player shows suspicious input behavior consistently
  if (
    avgVariance < THRESHOLDS.variance &&
    avgSmoothness > THRESHOLDS.smoothness &&
    totalImpossibleFlicks > THRESHOLDS.impossibleFlicks
  ) {
    flagPlayer(playerId);
  }
}

function flagPlayer(playerId) {
  console.warn(`Player ${playerId} flagged for suspicious input behavior.`);
  // TODO: implement ban, softban, or monitoring here
}
